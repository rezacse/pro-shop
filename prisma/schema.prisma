// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  //output   = "../lib/generated/prisma"
}

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

enum Role {
  CUSTOMER
  SUPPORT
  ADMIN
}

model Currency {
  id             String  @id @default(dbgenerated("gen_random_uuid()")) @map("ID") @db.Uuid
  name           String  @map("Name") @db.VarChar(50)
  symbol         String  @map("Symbol") @db.VarChar(3)
  code           String  @map("Code") @db.VarChar(10)
  conversionRate Decimal @db.Decimal(6, 2)

  isArchived Boolean  @default(false) @map("IsArchived")
  createdAt  DateTime @default(now()) @map("CreatedAt")
  updatedAt  DateTime @default(now()) @map("UpdatedAt")

  users    User[]
  products Product[]
}

model Country {
  id      String @id @default(dbgenerated("gen_random_uuid()")) @map("ID") @db.Uuid
  name    String @map("Name") @db.VarChar(50)
  isoCode String @default("") @map("IsoCode") @db.VarChar(20)

  isArchived Boolean  @default(false) @map("IsArchived")
  createdAt  DateTime @default(now()) @map("CreatedAt")
  updatedAt  DateTime @default(now()) @map("UpdatedAt")

  users    User[]
  products Product[]
}

model User {
  id       String @id @default(dbgenerated("gen_random_uuid()")) @map("ID") @db.Uuid
  name     String @map("Name") @db.VarChar(250)
  username String @unique @map("Username") @db.VarChar(15)
  password String @map("Password") @db.VarChar(100)
  email    String @unique @map("Email") @db.VarChar(50)
  mobileNo String @unique @map("MobileNo") @db.VarChar(15)

  country   Country @relation(fields: [countryID], references: [id])
  countryID String  @map("CountryID") @db.Uuid

  currency   Currency @relation(fields: [currencyID], references: [id])
  currencyID String   @map("CurrencyID") @db.Uuid

  role Role @default(CUSTOMER) @map("Role")

  isArchived Boolean  @default(false) @map("IsArchived")
  createdAt  DateTime @default(now()) @map("CreatedAt")
  updatedAt  DateTime @default(now()) @map("UpdatedAt")

  reviews        ProductReview[]
  twoFactorAuths TwoFactorAuth[]
}

model TwoFactorAuth {
  id            String    @id @default(dbgenerated("gen_random_uuid()")) @map("ID") @db.Uuid
  secretKey     String    @unique @map("SecretKey") @db.VarChar(50)
  ipAddress     String    @map("IpAddress") @db.VarChar(50)
  isActive      Boolean   @map("IsActive")
  deactivatedOn DateTime? @map("DeactivatedOn")

  user   User   @relation(fields: [userID], references: [id])
  userID String @map("UserID") @db.Uuid

  createdAt DateTime @default(now()) @map("CreatedAt")
  updatedAt DateTime @default(now()) @map("UpdatedAt")
}

model ProductCategory {
  id   String @id @default(dbgenerated("gen_random_uuid()")) @map("ID") @db.Uuid
  name String @map("Name") @db.VarChar(250)

  isArchived Boolean  @default(false) @map("IsArchived")
  createdAt  DateTime @default(now()) @map("CreatedAt")
  updatedAt  DateTime @default(now()) @map("UpdatedAt")

  products Product[]
}

model ProductBrand {
  id   String @id @default(dbgenerated("gen_random_uuid()")) @map("ID") @db.Uuid
  name String @map("Name") @db.VarChar(250)

  isArchived Boolean  @default(false) @map("IsArchived")
  createdAt  DateTime @default(now()) @map("CreatedAt")
  updatedAt  DateTime @default(now()) @map("UpdatedAt")

  products Product[]
}

model Product {
  id                   String   @id @default(dbgenerated("gen_random_uuid()")) @map("ID") @db.Uuid
  name                 String   @map("Name") @db.VarChar(250)
  slug                 String   @map("Slug") @db.VarChar(100)
  description          String   @map("Description") @db.VarChar(5000)
  imgUrls              String[] @map("ImgUrls")
  detail               String   @default("[]") @map("Detail") @db.VarChar(5000)
  noOfStock            Int      @map("NoOfStock")
  price                Decimal  @map("Price") @db.Decimal(10, 2)
  discountAmount       Decimal  @map("DiscountAmount") @db.Decimal(10, 2)
  discountIsPercentage Boolean  @default(false) @map("DiscountIsPercentage")
  isFeatured           Boolean  @default(false) @map("IsFeatured")
  bannerImg            String   @default("") @map("BannerImg") @db.VarChar(100)

  isArchived Boolean  @default(false) @map("IsArchived")
  createdAt  DateTime @default(now()) @map("CreatedAt")
  updatedAt  DateTime @default(now()) @map("UpdatedAt")

  productCategory   ProductCategory @relation(fields: [productCategoryID], references: [id])
  productCategoryID String          @map("ProductCategoryID") @db.Uuid

  productBrand   ProductBrand @relation(fields: [productBrandID], references: [id])
  productBrandID String       @map("ProductBrandID") @db.Uuid

  Country   Country @relation(fields: [countryID], references: [id])
  countryID String  @map("CountryID") @db.Uuid

  currency   Currency @relation(fields: [currencyID], references: [id])
  currencyID String   @map("CurrencyID") @db.Uuid

  reviews ProductReview[]
}

model ProductReview {
  id         String  @id @default(dbgenerated("gen_random_uuid()")) @map("ID") @db.Uuid
  rating     Decimal @map("Rating") @db.Decimal(3, 2)
  review     String  @map("Review") @db.VarChar(50)
  note       String  @map("Note") @db.VarChar(50)
  isVerified Boolean @default(false) @map("IsVerified")

  user   User   @relation(fields: [userID], references: [id])
  userID String @map("UserID") @db.Uuid

  product   Product @relation(fields: [productID], references: [id])
  productID String  @map("ProductID") @db.Uuid

  isArchived Boolean  @default(false) @map("IsArchived")
  createdAt  DateTime @default(now()) @map("CreatedAt")
  updatedAt  DateTime @default(now()) @map("UpdatedAt")
}
